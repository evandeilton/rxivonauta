# Configura√ß√µes do projeto
"""
M√≥dulo de configura√ß√µes centralizadas do Rxivonauta.

Este m√≥dulo gerencia todas as configura√ß√µes do projeto, incluindo:
- Caminhos de diret√≥rios
- Configura√ß√µes de APIs
- Par√¢metros do sistema
- Configura√ß√µes de logging
- Campos de sa√≠da
- Suporte a idiomas
"""

from pathlib import Path
import os
from typing import Dict, List
from dotenv import load_dotenv

# Verifica e carrega vari√°veis de ambiente do arquivo .env
def load_env_file():
    """Carrega e valida vari√°veis de ambiente."""
    env_file = Path(__file__).resolve().parent.parent / '.env'
    if not env_file.exists():
        raise FileNotFoundError(
            "Arquivo .env n√£o encontrado. Por favor, crie o arquivo .env "
            "baseado no .env.example"
        )
    load_dotenv(env_file)

load_env_file()

# Valida√ß√£o da API key do OpenRouter
def validate_api_key():
    """Valida a presen√ßa da API key do OpenRouter."""
    api_key = os.getenv('OPENROUTER_API_KEY')
    if not api_key:
        raise ValueError(
            "OPENROUTER_API_KEY n√£o encontrada no arquivo .env. "
            "Esta chave √© obrigat√≥ria para o funcionamento do sistema."
        )
    return api_key

# Estrutura de diret√≥rios
class Directories:
    """Configura√ß√£o de diret√≥rios do projeto."""
    BASE_DIR = Path(__file__).resolve().parent.parent
    DATA_DIR = BASE_DIR / 'data'
    RAW_DATA_DIR = DATA_DIR / 'raw'
    PROCESSED_DATA_DIR = DATA_DIR / 'processed'
    LOG_DIR = BASE_DIR / 'logs'

    @classmethod
    def create_dirs(cls):
        """Cria os diret√≥rios necess√°rios se n√£o existirem."""
        for dir_path in [cls.DATA_DIR, cls.RAW_DATA_DIR, 
                        cls.PROCESSED_DATA_DIR, cls.LOG_DIR]:
            dir_path.mkdir(parents=True, exist_ok=True)

# Configura√ß√µes da API OpenRouter
class OpenRouterConfig:
    """Configura√ß√µes da API do OpenRouter."""
    API_KEY = validate_api_key()
    BASE_URL = 'https://openrouter.ai/api/v1'
    DEFAULT_MODEL = os.getenv('OPENROUTER_MODEL', 'perplexity/llama-3.1-sonar-small-128k-chat') #google/gemini-2.0-flash-001
    MODEL = DEFAULT_MODEL
    SITE_URL = 'https://github.com/evandeilton/rxivonauta'
    SITE_NAME = 'rxivonauta'
    
    # Configura√ß√µes de taxa de requisi√ß√£o
    MAX_RETRIES = 3
    RETRY_DELAY = 5  # segundos
    TIMEOUT = 30     # segundos

    # Lista de modelos dispon√≠veis
    MODELS = [
        "google/gemini-2.0-flash-001",
        "google/gemini-2.0-flash-thinking-exp:free",
        "google/gemini-2.0-flash-lite-preview-02-05:free",
        "google/gemini-2.0-pro-exp-02-05:free",
        "mistralai/mistral-7b-instruct:free",
        "mistralai/mistral-small-24b-instruct-2501:free",
        "anthropic/claude-3.5-haiku-20241022:beta",
        "openai/o3-mini",
        "openai/o3-mini-high",
        "perplexity/llama-3.1-sonar-small-128k-chat",
        "microsoft/phi-3-medium-128k-instruct:free",
        "meta-llama/llama-3.3-70b-instruct:free"
    ]

    @classmethod
    def validate_model(cls, model: str) -> bool:
        """Valida se o modelo fornecido est√° na lista de modelos dispon√≠veis."""
        return model in cls.MODELS

# Configura√ß√µes do sistema
class SystemConfig:
    """Configura√ß√µes gerais do sistema."""
    MAX_QUERIES = 5              # n√∫mero de queries a serem geradas
    MAX_SELECTED_PER_QUERY = 2   # n√∫mero de artigos selecionados por query
    CHUNK_SIZE = 1000            # tamanho do chunk para processamento de dados
    CACHE_ENABLED = True         # habilita cache de requisi√ß√µes
    CACHE_TTL = 3600             # tempo de vida do cache em segundos

# Configura√ß√µes do Arxiv
class ArxivConfig:
    """Configura√ß√µes da API do Arxiv."""
    MAX_RESULTS = 5     # n√∫mero de artigos por query
    RATE_LIMIT = 3      # segundos entre requisi√ß√µes
    SORT_BY = 'SubmittedDate'     # crit√©rio de ordena√ß√£o
    SORT_ORDER = 'descending'     # ordem de classifica√ß√£o
    MAX_AGE_DAYS = None  # idade m√°xima dos artigos em dias (None = sem limite)
    
    # Categorias padr√£o para busca
    CATEGORIES = [
        'cs.AI',        # Intelig√™ncia Artificial
        'cs.CL',        # Computa√ß√£o Lingu√≠stica
        'cs.LG',        # Aprendizado de M√°quina
        'stat.ML',      # Aprendizado de M√°quina (Estat√≠stica)
        'stat.ME',      # Metodologia
        'stat.TH',      # Estat√≠stica Te√≥rica
        'math.ST',      # Estat√≠stica
        'q-bio.QM'      # M√©todos Quantitativos
    ]

# Configura√ß√µes de logging
class LogConfig:
    """Configura√ß√µes do sistema de logging."""
    DIR = Directories.LOG_DIR
    FILE = DIR / 'rxivonauta.log'
    FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    LEVEL = os.getenv('LOG_LEVEL', 'INFO')
    MAX_SIZE = 10 * 1024 * 1024  # 10MB
    BACKUP_COUNT = 5             # n√∫mero de arquivos de backup

# Campos de sa√≠da
class OutputConfig:
    """Configura√ß√£o dos campos de sa√≠da."""
    # Campos completos incluindo an√°lise
    OUTPUT_FIELDS = [
        'title',
        'authors',
        'published',
        'updated',
        'summary',
        'pdf_url',
        'arxiv_id',
        'categories',
        'doi',
        'journal_ref',
        'comment',
        'query_id',
        'relevance_score',
        'selection_rationale',
        'key_aspects',
        'methodology_score',
        'impact_score',
        'language_notes',
        'final_score',
        'aspect_bonus'
    ]

    # Campos esperados do Arxiv
    ARXIV_OUTPUT_FIELDS = [
        'title',
        'authors',
        'published',
        'updated',
        'summary',
        'pdf_url',
        'arxiv_id',
        'categories',
        'doi',
        'journal_ref',
        'comment',
        'query_id',
    ]

# Configura√ß√µes de idiomas
class LanguageConfig:
    """Configura√ß√£o de suporte a idiomas."""
    SUPPORTED_LANGUAGES = {
        "pt-BR": "üáßüá∑ Portugu√™s (Brasil)",
        "en-US": "üá∫üá∏ Ingl√™s (EUA)",
        "es-ES": "üá™üá∏ Espanhol (Espanha)",
        "fr-FR": "üá´üá∑ Franc√™s (Fran√ßa)",
        "it-IT": "üáÆüáπ Italiano (It√°lia)",
        "ru-RU": "üá∑üá∫ Russo (R√∫ssia)",
        "ar-AE": "üá¶üá™ √Årabe (Emirados)",
        "zh-HK": "üá≠üá∞ Chin√™s (Hong Kong)"
    }
    DEFAULT_LANGUAGE = "pt-BR"

    @classmethod
    def is_supported(cls, lang_code: str) -> bool:
        """Verifica se um c√≥digo de idioma √© suportado."""
        return lang_code in cls.SUPPORTED_LANGUAGES

# Criar diret√≥rios necess√°rios
Directories.create_dirs()

# Exportar configura√ß√µes para uso no projeto
__all__ = [
    'Directories',
    'OpenRouterConfig',
    'SystemConfig',
    'ArxivConfig',
    'LogConfig',
    'OutputConfig',
    'LanguageConfig'
]
